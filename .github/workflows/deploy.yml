name: Deploy Cloud Run

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options:
        - create
        - destroy

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: maf-policy-bot

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        # Always configure GCS backend
        echo 'terraform {' > backend_override.tf
        echo '  backend "gcs" {' >> backend_override.tf
        echo '    bucket = "${{ env.PROJECT_ID }}-maf-policy-bot-terraform-state"' >> backend_override.tf
        echo '    prefix = "terraform/state"' >> backend_override.tf
        echo '  }' >> backend_override.tf
        echo '}' >> backend_override.tf
        # Clean slate initialization
        rm -rf .terraform .terraform.lock.hcl || true
        terraform init -upgrade -reconfigure
      working-directory: ./terraform

    - name: Terraform Plan (Create)
      if: github.event.inputs.action == 'create'
      run: terraform plan -var="project_id=${{ env.PROJECT_ID }}" -var="region=${{ env.REGION }}" -var="service_name=${{ env.SERVICE_NAME }}"
      working-directory: ./terraform

    - name: Terraform Apply (Create)
      if: github.event.inputs.action == 'create'
      run: |
        # Import existing service to avoid conflicts
        terraform import -lock=false google_cloud_run_v2_service.default projects/${{ env.PROJECT_ID }}/locations/${{ env.REGION }}/services/${{ env.SERVICE_NAME }} || true
        terraform apply -auto-approve -lock=false \
          -var="project_id=${{ env.PROJECT_ID }}" \
          -var="region=${{ env.REGION }}" \
          -var="service_name=${{ env.SERVICE_NAME }}" \
          -var="google_client_id=${{ secrets.GOOGLE_CLIENT_ID }}" \
          -var="google_client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }}" \
          -parallelism=10
      working-directory: ./terraform

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy -auto-approve -lock=false \
          -var="project_id=${{ env.PROJECT_ID }}" \
          -var="region=${{ env.REGION }}" \
          -var="service_name=${{ env.SERVICE_NAME }}" \
          -var="google_client_id=${{ secrets.GOOGLE_CLIENT_ID }}" \
          -var="google_client_secret=${{ secrets.GOOGLE_CLIENT_SECRET }}"
      working-directory: ./terraform
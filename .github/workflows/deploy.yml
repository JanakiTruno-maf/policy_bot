name: Deploy Cloud Run

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'create'
        type: choice
        options:
        - create
        - destroy

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: maf-policy-bot

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: |
        # Always configure GCS backend
        echo 'terraform {' > backend_override.tf
        echo '  backend "gcs" {' >> backend_override.tf
        echo '    bucket = "${{ env.PROJECT_ID }}-maf-policy-bot-terraform-state"' >> backend_override.tf
        echo '    prefix = "terraform/state"' >> backend_override.tf
        echo '  }' >> backend_override.tf
        echo '}' >> backend_override.tf
        # Clean slate initialization
        rm -rf .terraform .terraform.lock.hcl || true
        terraform init -upgrade -reconfigure
      working-directory: ./terraform

    - name: Terraform Plan (Create)
      if: github.event.inputs.action == 'create'
      run: terraform plan -var="project_id=${{ env.PROJECT_ID }}" -var="region=${{ env.REGION }}" -var="service_name=${{ env.SERVICE_NAME }}"
      working-directory: ./terraform

    - name: Deploy with Cloud Build (Create)
      if: github.event.inputs.action == 'create'
      run: |
        # Submit build and wait for completion without streaming logs
        BUILD_ID=$(gcloud builds submit --config cloudbuild.yaml --project=${{ env.PROJECT_ID }} --format="value(id)" --no-user-output-enabled)
        echo "Build ID: $BUILD_ID"
        # Wait for build to complete
        gcloud builds wait $BUILD_ID --project=${{ env.PROJECT_ID }}
        # Set environment variables
        gcloud run services update ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --project=${{ env.PROJECT_ID }} \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }},VERTEX_LOCATION=${{ env.REGION }},VERTEX_MODEL_NAME=gemini-2.0-flash-001,RAG_CORPUS_RESOURCE=projects/${{ env.PROJECT_ID }}/locations/us-east4/ragCorpora/4035225266123964416,SECRET_KEY=tobacco-legal-info-system-2024,GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }},GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}"
        echo "âœ… Deployment completed successfully!"
        echo "ðŸš€ Service URL: https://${{ env.SERVICE_NAME }}-670869581400.${{ env.REGION }}.run.app"

    - name: Destroy Service
      if: github.event.inputs.action == 'destroy'
      run: |
        gcloud run services delete ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --project=${{ env.PROJECT_ID }} \
          --quiet